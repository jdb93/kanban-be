// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BoardRole {
  ADMIN
  MEMBER
  VIEWER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boards    BoardMember[]
  tasks     Task[]
  comments  Comment[]
}

model Board {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  columns   Column[]
  members   BoardMember[]
}

model Column {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id       String    @id @default(uuid())
  title    String
  description String?
  priority Int
  status   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  columnId String
  column   Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  comments Comment[]
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BoardMember {
  id     String @id @default(uuid())
  boardId String
  userId  String
  role    BoardRole @default(MEMBER)
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId])
}