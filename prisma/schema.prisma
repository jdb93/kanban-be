generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  email     String        @unique
  password  String
  name      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  boards    BoardMember[]
  comments  Comment[]
  tasks     Task[]
}

model Board {
  id        String        @id @default(uuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   BoardMember[]
  columns   Column[]
}

model Column {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  priority    Int
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  columnId    String
  userId      String
  comments    Comment[]
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BoardMember {
  id      String    @id @default(uuid())
  boardId String
  userId  String
  role    BoardRole @default(MEMBER)
  board   Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId])
}

enum BoardRole {
  ADMIN
  MEMBER
  VIEWER
}
